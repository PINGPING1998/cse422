1} Tara Renduchintala and Anderson Gonzalez

2} When CTRL+C was pressed, the program immediately stopped it's execution, had a new line and then return back to the shell.
There was no delay from pressing CTRL+C to the program exiting. 

******OUTPUT********
i: 30709
i: 30710
i: 30711
i: 30712
i: 30713
i: 30714

[trenduchintala@linuxlab007 studio18]$
********************

3} The purpose of the called array is to indicate at what point the interrupt was called. It changes the value at that position to 1 so we know when it was called.

4} ****OUTPUT*******

i: 499996
i: 499997
i: 499998
i: 499999
72838 was possibly interrupted
172105 was possibly interrupted
284480 was possibly interrupted
382818 was possibly interrupted
464970 was possibly interrupted

********************

5} As soon as CTRL+\ was hit, the program immediately stopped and output the exact number that the signal was called at. 

i: 72221
i: 72222
i: 72223
i: 72224
i: 72225
i: 72226
72226 was possibly interrupted

6}
i: 433812
i: 433813
i: 433814
i: 433815
i: 433816
i: 433817
i: Caught SIGINT
i: 433410
i: 433411
i: 433412

I think this was happening because by the time the sigint was registered the program had moved on. However, once the 
handler printed out a value, the array went back to the value it was called at and started outputting values from there. 

7} When using write instead of printf, the numbers continued even though the SIGINT was caught. They still displayed in order
and nothing was out of place. With printf, the order of the nubmers was interrupted.

8} If the user invokes the first signal, the count increases. If the user invokes the second signal, the program terminates. At the end of the program,
the function prints otu the amoutn of times the first signal was recieved. 

9} The program always returned 2. This must be because the signals were sent so fast that the variable didn't have time to update before the second
signal was sent. 

10} The current limit is 6894 signals and the program always sent exactly how many signals were specified as the second argument parameter.

11} The signal was recieved the exact number of times it was specified because the value that was being read was 0 for the same number of iterations as 
specified by the command line argument. 


