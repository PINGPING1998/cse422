1} Tara Renduchintala and Anderson Gonzalez

2} pi@taraspberrypi:~/studio8 $ ./simple_fork 
Before forking! I am the parent and my pid is: 1775
After forking, the child's PID is: 1776
I am a child and my PID is: 1776 and my parent's PID is: 1775.

3} The program correctly spawns 15 proccesses.

pi@taraspberrypi:~/studio8 $ ./tree_fork 4
Parent's PID is: 1473
Process belongs to generation: 0
 and the pid is: 1474
Process belongs to generation: 1
 and the pid is: 1475
Process belongs to generation: 2
 and the pid is: 1476
Process belongs to generation: 3
 and the pid is: 1477
Process belongs to generation: 3
 and the pid is: 1478
Process belongs to generation: 2
 and the pid is: 1479
Process belongs to generation: 3
 and the pid is: 1480
Process belongs to generation: 3
 and the pid is: 1481
Process belongs to generation: 1
 and the pid is: 1482
Process belongs to generation: 2
 and the pid is: 1483
Process belongs to generation: 3
 and the pid is: 1484
Process belongs to generation: 3
 and the pid is: 1485
Process belongs to generation: 2
 and the pid is: 1486
Process belongs to generation: 3
 and the pid is: 1487
Process belongs to generation: 3
 and the pid is: 1488

4}
pi@taraspberrypi:~/studio8 $ sudo dmesg
[ 1910.455404] Foo is updated! It was 0 and is now 42
[ 1932.761503] Bar is updated! It was 0 and is now 43
[ 1942.608272] Baz is updated! It was 0 and is now 44

5}
pi@taraspberrypi:~/studio8 $ sudo dmesg
[26191.223571] Initial Command: systemd and Initial ID: 1
[26387.912398] Parent Command: bash and  Parent ID: 5275
[26387.912417] Task Command: sudo and Task PID: 7898
[26387.912428] Parent Command: lxterminal and  Parent ID: 5266
[26387.912434] Task Command: bash and Task PID: 5275
[26387.912444] Parent Command: lxpanel and  Parent ID: 656
[26387.912450] Task Command: lxterminal and Task PID: 5266
[26387.912460] Parent Command: lxsession and  Parent ID: 575
[26387.912466] Task Command: lxpanel and Task PID: 656
[26387.912476] Parent Command: lightdm and  Parent ID: 553
[26387.912482] Task Command: lxsession and Task PID: 575
[26387.912492] Parent Command: lightdm and  Parent ID: 492
[26387.912498] Task Command: lightdm and Task PID: 553
[26387.912509] Parent Command: systemd and  Parent ID: 1
[26387.912515] Task Command: lightdm and Task PID: 492

*******************simple_fork.c*********************************
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
	printf("Before forking! I am the parent and my pid is: %d\n", getpid());
	int childPID = fork();
	if(childPID != 0){
		printf("After forking, the child's PID is: %d\n", childPID);
	}

	if(childPID == 0){
		printf("I am a child and my PID is: %d and my parent's PID is: %d.\n", getpid(), getppid());
	}
}

*****************tree_fork.c**************************************
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <errno.h>


int main(int argc, char *argv[]){
    int generations = atoi( argv[1]);
    int generation = 0;
    int forkid = 0;
    printf("Parent's PID is: %d\n", getpid());
    while(generation < generations){
        forkid = fork();
        int childid;
        if(forkid == 0){

            printf("Process belongs to generation: %d\n and the pid is: %d\n", generation, getpid());
            childid = wait(0);
            generation++;
        }
        else{
            //forkid = fork();
            childid = wait(0);
            if(childid == -1){
                perror("Error: ");
            }
            //printf("The child's id was: %d and the parent was: %d\n", childid, getpid());
            generation++;
        }
    }
}

**********************kobject_example.c****************************
// SPDX-License-Identifier: GPL-2.0
/*
 * Sample kobject implementation
 *
 * Copyright (C) 2004-2007 Greg Kroah-Hartman <greg@kroah.com>
 * Copyright (C) 2007 Novell Inc.
 */
#include <linux/kobject.h>
#include <linux/string.h>
#include <linux/sysfs.h>
#include <linux/module.h>
#include <linux/init.h>

/*
 * This module shows how to create a simple subdirectory in sysfs called
 * /sys/kernel/kobject-example  In that directory, 3 files are created:
 * "foo", "baz", and "bar".  If an integer is written to these files, it can be
 * later read out of it.
 */

static int foo;
static int baz;
static int bar;

/*
 * The "foo" file where a static variable is read from and written to.
 */
static ssize_t foo_show(struct kobject *kobj, struct kobj_attribute *attr,
			char *buf)
{
	return sprintf(buf, "%d\n", foo);
}

static ssize_t foo_store(struct kobject *kobj, struct kobj_attribute *attr,
			 const char *buf, size_t count)
{
	int ret;
    int oldFoo = foo;
	ret = kstrtoint(buf, 10, &foo);
	if (ret < 0)
		return ret;
    printk("Foo is updated! It was %d and is now %d\n", oldFoo, foo);
	return count;
}

/* Sysfs attributes cannot be world-writable. */
static struct kobj_attribute foo_attribute =
	__ATTR(foo, 0664, foo_show, foo_store);

/*
 * More complex function where we determine which variable is being accessed by
 * looking at the attribute for the "baz" and "bar" files.
 */
static ssize_t b_show(struct kobject *kobj, struct kobj_attribute *attr,
		      char *buf)
{
	int var;

	if (strcmp(attr->attr.name, "baz") == 0)
		var = baz;
	else
		var = bar;
	return sprintf(buf, "%d\n", var);
}

static ssize_t b_store(struct kobject *kobj, struct kobj_attribute *attr,
		       const char *buf, size_t count)
{
	int var, ret;
    int oldBaz, oldBar;
	ret = kstrtoint(buf, 10, &var);
	if (ret < 0)
		return ret;

	if (strcmp(attr->attr.name, "baz") == 0){
        oldBaz = baz;
		baz = var;
        printk("Baz is updated! It was %d and is now %d\n", oldBaz, baz);
    }
	else{
        oldBar = bar;
		bar = var;
        printk("Bar is updated! It was %d and is now %d\n",oldBar, bar);
    }
	return count;
}

static struct kobj_attribute baz_attribute =
	__ATTR(baz, 0664, b_show, b_store);
static struct kobj_attribute bar_attribute =
	__ATTR(bar, 0664, b_show, b_store);


/*
 * Create a group of attributes so that we can create and destroy them all
 * at once.
 */
static struct attribute *attrs[] = {
	&foo_attribute.attr,
	&baz_attribute.attr,
	&bar_attribute.attr,
	NULL,	/* need to NULL terminate the list of attributes */
};

/*
 * An unnamed attribute group will put all of the attributes directly in
 * the kobject directory.  If we specify a name, a subdirectory will be
 * created for the attributes with the directory being the name of the
 * attribute group.
 */
static struct attribute_group attr_group = {
	.attrs = attrs,
};

static struct kobject *example_kobj;

static int __init example_init(void)
{
	int retval;

	/*
	 * Create a simple kobject with the name of "kobject_example",
	 * located under /sys/kernel/
	 *
	 * As this is a simple directory, no uevent will be sent to
	 * userspace.  That is why this function should not be used for
	 * any type of dynamic kobjects, where the name and number are
	 * not known ahead of time.
	 */
	example_kobj = kobject_create_and_add("kobject_example", kernel_kobj);
	if (!example_kobj)
		return -ENOMEM;

	/* Create the files associated with this kobject */
	retval = sysfs_create_group(example_kobj, &attr_group);
	if (retval)
		kobject_put(example_kobj);

	return retval;
}

static void __exit example_exit(void)
{
	kobject_put(example_kobj);
}

module_init(example_init);
module_exit(example_exit);
MODULE_LICENSE("GPL v2");
MODULE_AUTHOR("Greg Kroah-Hartman <greg@kroah.com>");

**************************family_reader.c*******************************
// SPDX-License-Identifier: GPL-2.0
/*
 * Sample kobject implementation
 *
 * Copyright (C) 2004-2007 Greg Kroah-Hartman <greg@kroah.com>
 * Copyright (C) 2007 Novell Inc.
 */
#include <linux/kobject.h>
#include <linux/string.h>
#include <linux/sysfs.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/pid.h>
#include <linux/sched.h>

/*
 * This module shows how to create a simple subdirectory in sysfs called
 * /sys/kernel/kobject-example  In that directory, 3 files are created:
 * "foo", "baz", and "bar".  If an integer is written to these files, it can be
 * later read out of it.
 */

static int pidint;


/*
 * More complex function where we determine which variable is being accessed by
 * looking at the attribute for the "baz" and "bar" files.
 */
static ssize_t pid_show(struct kobject *kobj, struct kobj_attribute *attr,
		      char *buf)
{
	int var;

	if (strcmp(attr->attr.name, "pidint") == 0)
		var = pidint;
	return sprintf(buf, "%d\n", var);
}

static ssize_t pid_store(struct kobject *kobj, struct kobj_attribute *attr,
		       const char *buf, size_t count)
{
	int var, ret;
    long currpid;
    
    struct pid*  pid;
    struct task_struct *task, *curr_task, *parent;
	ret = kstrtoint(buf, 10, &var);
	if (ret < 0)
		return ret;
   
    pidint = var;

    if(find_vpid(pidint) > 0){
        pid = find_vpid(pidint);
    }
    else{
        printk("Error in find_vpid");
    }

    if(pid_task(pid, PIDTYPE_PID) > 0){
        task  = pid_task(pid, PIDTYPE_PID);
    }
    else{
        printk("Error in pid_task");
    }

    currpid = 0;
    curr_task = task;
    while(currpid != 1){
        parent = curr_task->real_parent;
        printk("Parent Command: %s and  Parent ID: %ld", parent->comm, (long)parent->pid);
        currpid = (long)(parent->pid);
        printk("Task Command: %s and Task PID: %ld\n", curr_task->comm, (long)curr_task->pid);
        curr_task = parent;
    }
    if((long)parent->pid == 1){
        printk("Initial Command: %s and Initial ID: %ld", curr_task->comm, (long)(curr_task->pid));
    }

	return count;
}

static struct kobj_attribute pid_attribute =
	__ATTR(pidint, 0664, pid_show, pid_store);


/*
 * Create a group of attributes so that we can create and destroy them all
 * at once.
 */
static struct attribute *attrs[] = {
	&pid_attribute.attr,
	NULL,	/* need to NULL terminate the list of attributes */
};

/*
 * An unnamed attribute group will put all of the attributes directly in
 * the kobject directory.  If we specify a name, a subdirectory will be
 * created for the attributes with the directory being the name of the
 * attribute group.
 */
static struct attribute_group attr_group = {
	.attrs = attrs,
};

static struct kobject *fam_reader_kobj;

static int __init fam_reader_init(void)
{
	int retval;

	/*
	 * Create a simple kobject with the name of "kobject_example",
	 * located under /sys/kernel/
	 *
	 * As this is a simple directory, no uevent will be sent to
	 * userspace.  That is why this function should not be used for
	 * any type of dynamic kobjects, where the name and number are
	 * not known ahead of time.
	 */
	fam_reader_kobj = kobject_create_and_add("fam_reader", kernel_kobj);
	if (!fam_reader_kobj)
		return -ENOMEM;

	/* Create the files associated with this kobject */
	retval = sysfs_create_group(fam_reader_kobj, &attr_group);
	if (retval)
		kobject_put(fam_reader_kobj);

	return retval;
}

static void __exit fam_reader_exit(void)
{
	kobject_put(fam_reader_kobj);
}

module_init(fam_reader_init);
module_exit(fam_reader_exit);
MODULE_LICENSE("GPL v2");
MODULE_AUTHOR("Greg Kroah-Hartman <greg@kroah.com>");
