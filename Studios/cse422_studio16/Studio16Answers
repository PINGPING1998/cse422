1} Tara Renduchintala and Anderson Gonzalez

2} 
pi@taraspberrypi:~/studio16 $ ./server
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4

pi@taraspberrypi:~/studio16 $ ./client
connection made
0
1
2
3
4

3}
pi@taraspberrypi:~/studio16 $ ./server
New connection made: 4
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4
New connection made: 5
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4
New connection made: 6
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4

4}
*******server output********
[trenduchintala@shell studio16]$ ./server_inet 
New connection made: 4
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4
New connection made: 5
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4
New connection made: 6
integer: 0
integer: 1
integer: 2
integer: 3
integer: 4

*******client output**********
pi@taraspberrypi:~/studio16 $ ./client_inet
connection made
0
1
2
3
4
pi@taraspberrypi:~/studio16 $ ./client_inet
connection made
0
1
2
3
4
pi@taraspberrypi:~/studio16 $ ./client_inet quit
connection made
0
1
2
3
4
418




**************CLIENT.C****************
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#define MY_SOCK_PATH "/tmp/server_sock"

int main(int argc, char *argv[]){
	int specialnum = 0;
	if(argc == 2){
		if(!strcmp("quit", argv[1])){
			specialnum=418;
		}
			
	}

	int sfd, con, i;
	struct sockaddr_un peer_addr;
	socklen_t peer_addr_size;
	FILE * read_fd;
	peer_addr.sun_family = AF_UNIX;
	char buffer[16];
	
	sfd = socket(AF_UNIX, SOCK_STREAM, 0);
	if (sfd == -1){
			printf("Error with socket\n");
			printf("Error: %s\n", strerror(errno));

	}
	memset(&peer_addr, 0, sizeof(peer_addr));
	peer_addr.sun_family = AF_UNIX;
	
	strcpy(peer_addr.sun_path, MY_SOCK_PATH);
	//connect
	con = connect(sfd, (struct sockaddr *) &peer_addr, sizeof(peer_addr)); 
	if (con == -1){
		printf("Error with opening socket.\n");
	}
	else{
		printf("connection made\n");
	}

	read_fd = fdopen(sfd, "w");
	for(i = 0; i < 5; i++){
		sprintf(buffer, "%d\n", i);
		//memset(buffer, i, sizeof(buffer));
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
		//fprintf(read_fd, "%d\n", i);
		if(con == -1){
			printf("send failed\n");
		
		}
	}
	if(specialnum){
		sprintf(buffer, "%d\n", specialnum);
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
	}	
	fclose(read_fd);
	close(sfd);
	return 0;
	
}


****************CLIENT_INET.C*************************
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <netinet/ip.h>
#include <arpa/inet.h>

#define MY_SOCK_PATH "/tmp/server_sock"

int main(int argc, char *argv[]){
	int specialnum = 0;
	if(argc == 2){
		if(!strcmp("quit", argv[1])){
			specialnum=418;
		}
			
	}

	int sfd, con, i;
	struct sockaddr_in peer_addr;
	socklen_t peer_addr_size;
	FILE * read_fd;
	char buffer[16];
	
	sfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sfd == -1){
			printf("Error with socket\n");
			printf("Error: %s\n", strerror(errno));

	
	}
	memset(&peer_addr, 0, sizeof(peer_addr));
	peer_addr.sin_family = AF_INET;
	peer_addr.sin_port = htons(30001);
	inet_aton("128.252.167.161", &peer_addr.sin_addr);
	
	//connect
	con = connect(sfd, (struct sockaddr *) &peer_addr, sizeof(peer_addr)); 
	if (con == -1){
		printf("Error with opening socket.\n");
	}
	else{
		printf("connection made\n");
	}

	read_fd = fdopen(sfd, "w");
	for(i = 0; i < 5; i++){
		sprintf(buffer, "%d\n", i);
		//memset(buffer, i, sizeof(buffer));
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
		//fprintf(read_fd, "%d\n", i);
		if(con == -1){
			printf("send failed\n");
		
		}
	}
	if(specialnum){
		sprintf(buffer, "%d\n", specialnum);
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
	}	
	fclose(read_fd);
	close(sfd);
	return 0;
	
}

******************SERVER.C*******************
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <netinet/ip.h>
#include <arpa/inet.h>

#define MY_SOCK_PATH "/tmp/server_sock"

int main(int argc, char *argv[]){
	int specialnum = 0;
	if(argc == 2){
		if(!strcmp("quit", argv[1])){
			specialnum=418;
		}
			
	}

	int sfd, con, i;
	struct sockaddr_in peer_addr;
	socklen_t peer_addr_size;
	FILE * read_fd;
	char buffer[16];
	
	sfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sfd == -1){
			printf("Error with socket\n");
			printf("Error: %s\n", strerror(errno));

	
	}
	memset(&peer_addr, 0, sizeof(peer_addr));
	peer_addr.sin_family = AF_INET;
	peer_addr.sin_port = htons(30001);
	inet_aton("128.252.167.161", &peer_addr.sin_addr);
	
	//connect
	con = connect(sfd, (struct sockaddr *) &peer_addr, sizeof(peer_addr)); 
	if (con == -1){
		printf("Error with opening socket.\n");
	}
	else{
		printf("connection made\n");
	}

	read_fd = fdopen(sfd, "w");
	for(i = 0; i < 5; i++){
		sprintf(buffer, "%d\n", i);
		//memset(buffer, i, sizeof(buffer));
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
		//fprintf(read_fd, "%d\n", i);
		if(con == -1){
			printf("send failed\n");
		
		}
	}
	if(specialnum){
		sprintf(buffer, "%d\n", specialnum);
		fputs(buffer, stdout);
		con = send(sfd, buffer, strlen(buffer), 0);
	}	
	fclose(read_fd);
	close(sfd);
	return 0;
	
}

*****************SERVER_INET.C*********************
#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <netinet/ip.h>
#include <arpa/inet.h>

#define MY_SOCK_PATH "/tmp/server_sock"

int main(){
	int sfd, cfd;
	struct sockaddr_in my_addr, peer_addr;
	socklen_t peer_addr_size;
	FILE * read_fd;
	char * serverfifo = "/tmp/serverfifo";
	int status;
	
	status =  mkfifo(serverfifo, S_IRUSR | S_IWUSR);
	if(status == -1){
		if(errno != EEXIST){
			perror("mkfifio() failed");
			printf("Error with making fifo");
			return -1;
		}
	}

	sfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sfd == -1){
			printf("Error with socket\n");
			printf("Error: %s\n", strerror(errno));

	}
	my_addr.sin_family = AF_INET;
	my_addr.sin_port = htons(30001);
	my_addr.sin_addr.s_addr = INADDR_ANY;

	if(bind(sfd,(struct sockaddr *) &my_addr, sizeof(my_addr)) == -1){
			printf("Error with bind\n");
			printf("Error: %s\n", strerror(errno));
	}
	if(listen(sfd, 50) == -1){
			printf("Error with Listen\n");

			printf("Error: %s\n", strerror(errno));

	}
	
	peer_addr_size = sizeof(peer_addr);
	int term = 0;
	while(term == 0){
		cfd = accept(sfd, (struct sockaddr *) &peer_addr, &peer_addr_size);
		if (cfd == -1){
			printf("Error with Accept\n");

			printf("Error: %s\n", strerror(errno));
	
		}
		else{
				printf("New connection made: %d\n", cfd);
		}

		int i = 0;
		read_fd = fdopen(cfd, "r");
		if(read_fd == NULL){
			printf("Error in opening fifo");
			return -1;
		}
		int c;
	
		int j = 0;
		while(fscanf(read_fd, "%d", &c) > 0){
			if(c == 418){
				term = c;
				break;
			}
			printf("integer: %d\n", c);
		}
	
	}
	close(sfd);
	close(cfd);
		
	return 0;
	
}



