1} Tara Renduchintala and Anderson Gonzalez

2} [trenduchintala@shell userspace]$ ./lib_call
The current uid is: 1966052
Trying to change the uid: -1
Error: setuid failed! Reason: Operation not permitted

3} 
pi@taraspberrypi:~/userspace $ ./libcall
The current uid is: 1000
Trying to change the uid: -1
Error: setuid failed! Reason: Operation not permitted


The difference was only prevalent was the uid as they were different from 
the linuxlab computer to the pi.

4}
pi@taraspberrypi:~/userspace $ ./nativecall
The current uid is: 1000
Trying to change the uid: -1
Error: setuid failed! Reason: Operation not permitted

5}
asmlinkage long sys_noargs(void);
asmlinkage long sys_onearg(int x);

6} SYSCALl_DEFINE1(onarg, int, x){
    //print out a simple message indicating the fuction was called
    printk("Someone invoked the sys_onearg system call");
    printk("The number passed was: %d\n", x);
    return 0;
  }
 
 7}
 obj-y := elf.o entry-common.o irq.o opcode.o \
          process.o ptrace.o reboot.o return_address.o \
          setup.o signal.o sigreturn_codes.o \
          stacktrace.o sys_arm.o time.o traps.o sys_noargs.o sys_onearg.o
         
8}
436 common noargs sys_noargs
437 common onearg sys_onearg

9} 
Linux taraspberrypi 5.4.42-v7_trenduchintala_studio4 #4 SMP PREEMPT Tue 
Feb 9 00:40:20 CST 2021 armv7l GNU/Linux

10} 
[  991.666031] Someone invoked the sys_onearg system call
[  991.666050] The number passed was: 0
[ 1075.379998] Someone invoked the sys_noargs system call
[ 1075.380058] Someone invoked the sys_onearg system call
[ 1075.380078] The number passed was: 0


--------------lib_call.c---------------------

#include <unistd.h> 
#include <sys/types.h> 
#include <stdio.h> 
#include <errno.h> 
#include <string.h> 
uid_t print_uid(void) 
{ 
    return getuid(); 
} 
 
int change_uid(uid_t uid){ 
    setuid(uid); 
} 
 
int main() 
{ 
    int status = 0; 
    uid_t newuid = 0; 
    printf("The current uid is: "); 
    printf("%d\n", print_uid()); 
    status = change_uid(newuid); 
    printf("Trying to change the uid: "); 
    printf("%d\n", status); 
    if(status != 0){ 
        printf("Error: setuid failed! Reason: %s\n", strerror(errno)); 
    }; 
     
    return status; 
} 

----------native_call.c------------------


#include <stdio.h> 
#include <errno.h> 
#include <string.h> 
#include <unistd.h> 
#include <sys/syscall.h> 
 
uid_t print_uid(void) 
{ 
    return syscall(__NR_getuid); 
} 
 
int change_uid(uid_t uid){ 
    return syscall(__NR_setuid, uid); 
} 
 
int main() 
{ 
    int status = 0; 
    uid_t newuid = 0; 
    printf("The current uid is: "); 
    printf("%d\n", print_uid()); 
    status = change_uid(newuid); 
    printf("Trying to change the uid: "); 
    printf("%d\n", status); 
    if(status != 0){ 
        printf("Error: setuid failed! Reason: %s\n", strerror(errno)); 
    }; 
     
    return status; 
} 

-----------------new_call.c----------------------








------------syscall.tbl.diff----------------------
--- syscall.tbl 2021-02-08 23:48:44.390455804 -0600
+++ syscall.tbl.020821  2021-02-08 23:46:47.879250193 -0600

 433    common  fspick              sys_fspick
 434    common  pidfd_open          sys_pidfd_open
 435    common  clone3              sys_clone3
-436 common  noargs              sys_noargs
-437 common  onearg              sys_onearg

-------------syscall.h.diff-------------------------
--- syscalls.h  2021-02-08 23:26:40.491109078 -0600
+++ syscalls.h.020821   2021-02-08 23:14:15.616778683 -0600
@@ -1420,6 +1420,5 @@ long ksys_old_shmctl(int shmid, int cmd,
 long compat_ksys_semtimedop(int semid, struct sembuf __user *tsems,
                unsigned int nsops,
                const struct old_timespec32 __user *timeout);
-asmlinkage long sys_noargs(void);
-asmlinkage long sys_onearg(int x);
+
 #endif

-----------sys_onearg.c (implementation file)----------
/* This file implements a demonstration syscall for an OS course. It
   *  takes one  argument and prints out a simple message to the kernel
   *  log, indicating that it was called.
   */

#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/sched.h>
#include <linux/syscalls.h>

//Define a system call implementation that takes no arguments
SYSCALL_DEFINE1( onearg, int, x ){

      // print out a simple message indicating the function was called, and return SUCCESS
      printk("Someone invoked the sys_onearg system call");
      printk("The number passed was: %d\n", x);
        return 0;
}

//End of file

-------sys_noargs.c (implementation file)------------------
/* This file implements a demonstration syscall for an OS course.
    It no arguments and prints out a simple message to the kernel
 *  log, indicating that it was called.
 */

#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/sched.h>
#include <linux/syscalls.h>

 //Define a system call implementation that takes no arguments
 SYSCALL_DEFINE0( noargs ){

       // print out a simple message indicating the function was called, and return SUCCESS
       printk("Someone invoked the sys_noargs system call");
         return 0;
 }

//End of file


